apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'

android {
    compileSdkVersion 22
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "com.example.jiangyue.androidaps"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
            moduleName "blur" // <-- This is the name of my C++ module!
            ldLibs "EGL", "GLESv3", "dl", "log", "jnigraphics" // Link with these libraries!
            stl "stlport_shared"
        }
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/libs','src/main/jniLibs']
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    // 多渠道打包（示例配置）
    productFlavors {
        xiaomi {
            applicationId 'com.example.jiangyue.androidap.xiaomi'
        }

        yyb {
            applicationId 'com.example.jiangyue.androidap.yyb'
        }
    }
}

task ndkBuild(type: Exec, description: 'Compile JNI source with NDK') {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')

    if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir/ndk-build.cmd", '-C', file('src/main/jni').absolutePath
    } else {
        commandLine "$ndkDir/ndk-build", '-C', file('src/main/jni').absolutePath
    }
}

//读取本地签名文件
File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

task ndkClean(type: Exec, description: 'Clean NDK Binaries') {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')

    if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir/ndk-build.cmd",'clean', '-C', file('src/main/jni').absolutePath
    } else {
        commandLine "$ndkDir/ndk-build",'clean', '-C', file('src/main/jni').absolutePath
    }
}

clean.dependsOn 'ndkClean'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0'
    compile 'se.emilsjolander.stickylistheaders:library:2.1.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile files('libs/universal-image-loader-1.9.2.jar')
    compile files('libs/MobLogCollector.jar')
    compile files('libs/MobTools.jar')
    compile files('libs/ShareSDK-Core-2.6.2.jar')
    compile files('libs/ShareSDK-SinaWeibo-2.6.2.jar')
    /* 5) Use 21 or 22 */
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
    compile files('libs/Rong_IMKit_v2_4_9.jar')
    compile 'com.rmtheis:tess-two:6.2.0'
    compile 'io.card:android-sdk:5.5.0'
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'
    /* nuwa */
//    compile 'cn.jiajixin.nuwa:nuwa:1.0.0'
    androidTestCompile 'junit:junit:4.12'
    compile 'commons-io:commons-io:1.4'
    //tinker
    compile 'com.android.support:support-v4:23.1.0'
    compile "com.android.support:multidex:1.0.1" // 多dex配置
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release' // 升级SDK
}
//apply plugin: "cn.jiajixin.nuwa"
